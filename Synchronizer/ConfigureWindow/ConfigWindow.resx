<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AMfwAAAP+AGAH/zhhz//+Z////gf///4H/8=
</value>
  </data>
</root>